"""
Prompt builder for CommandRex.

This module provides functions to build effective prompts for the OpenAI API,
incorporating system information, command history, and user preferences.
"""

import json
from typing import Any, Dict, List, Optional

from commandrex.executor import platform_utils


class PromptBuilder:
    """
    Builder for creating effective prompts for command translation.

    This class handles the construction of prompts that incorporate
    system information, command history, and user preferences to
    generate accurate command translations.
    """

    def __init__(self):
        """Initialize the prompt builder."""
        # Base system prompts
        self.base_system_prompt = (
            "You are CommandRex, an expert in translating natural language into "
            "terminal commands. Your task is to convert user requests into the most "
            "appropriate command for their system.\n\n"
            "For each request, you should:\n"
            "1. Determine the user's intent\n"
            "2. Select the most appropriate command(s) for their system\n"
            "3. Format the command correctly\n"
            "4. Provide a clear explanation\n"
            "5. Assess the safety of the command\n"
            "6. Break down the command components\n"
            "7. Suggest alternatives if appropriate\n\n"
            "Always respond in JSON format with the following structure:\n"
            "{\n"
            '  "command": "the command to execute",\n'
            '  "explanation": "explanation of what the command does",\n'
            '  "safety_assessment": {\n'
            '    "is_safe": true/false,\n'
            '    "concerns": ["list", "of", "concerns"],\n'
            '    "risk_level": "low/medium/high"\n'
            "  },\n"
            '  "components": [\n'
            '    {"part": "command_part", "description": "what this part does"}\n'
            "  ],\n"
            '  "is_dangerous": true/false,\n'
            '  "alternatives": ["alternative1", "alternative2"]\n'
            "}\n"
        )

        self.safety_prompt = (
            "IMPORTANT SAFETY GUIDELINES:\n"
            "- Never generate commands that could harm the user's system\n"
            "- Flag commands that delete files, modify system settings, or have network impact\n"
            "- Provide clear warnings for potentially dangerous operations\n"
            "- Suggest safer alternatives when appropriate\n"
            "- Always explain what a command will do before the user executes it\n"
        )

        # Platform-specific prompt templates
        self.platform_prompts = {
            "windows": (
                "The user is on a Windows system. Use Windows-compatible commands.\n"
                "- Prefer PowerShell commands when appropriate\n"
                "- Use CMD commands when simpler or more universal\n"
                "- Use correct path separators (backslashes)\n"
                "- Consider Windows-specific tools and utilities\n"
            ),
            "macos": (
                "The user is on a macOS system. Use macOS-compatible commands.\n"
                "- Use Unix-style commands\n"
                "- Consider macOS-specific tools like Homebrew\n"
                "- Use correct path separators (forward slashes)\n"
                "- Be aware of macOS file system peculiarities\n"
            ),
            "linux": (
                "The user is on a Linux system. Use Linux-compatible commands.\n"
                "- Use standard Unix commands\n"
                "- Consider the common Linux tools and utilities\n"
                "- Use correct path separators (forward slashes)\n"
                "- Be aware of different package managers for different distributions\n"
            )
        }

        # Shell-specific prompt templates
        self.shell_prompts = {
            "bash": "The user is using Bash shell. Use Bash syntax for commands.",
            "zsh": "The user is using Zsh shell. Use Zsh syntax for commands.",
            "powershell": "The user is using PowerShell. Use PowerShell cmdlets and syntax.",
            "cmd": "The user is using Windows Command Prompt. Use CMD syntax for commands.",
        }

    def _get_platform_prompt(self) -> str:
        """
        Get the appropriate platform-specific prompt.

        Returns:
            str: Platform-specific prompt.
        """
        if platform_utils.is_windows():
            return self.platform_prompts["windows"]
        elif platform_utils.is_macos():
            return self.platform_prompts["macos"]
        elif platform_utils.is_linux():
            return self.platform_prompts["linux"]
        else:
            # Default to a generic prompt
            return "Use commands compatible with standard Unix-like systems."

    def _get_shell_prompt(self) -> str:
        """
        Get the appropriate shell-specific prompt.

        Returns:
            str: Shell-specific prompt.
        """
        shell_info = platform_utils.detect_shell()
        if shell_info:
            shell_name = shell_info[0]
            if shell_name in self.shell_prompts:
                return self.shell_prompts[shell_name]

        # Default to a generic prompt
        return "Use standard shell syntax for commands."

    def build_system_context(self, include_platform_info: bool = True) -> Dict[str, Any]:
        """
        Build a system context dictionary with platform information.

        Args:
            include_platform_info (bool): Whether to include platform information.

        Returns:
            Dict[str, Any]: System context dictionary.
        """
        context = {}

        if include_platform_info:
            # Get platform information
            platform_info = platform_utils.get_platform_info()
            context.update(platform_info)

            # Add terminal capabilities
            context["supports_ansi_colors"] = platform_utils.supports_ansi_colors()
            context["terminal_size"] = platform_utils.get_terminal_size()

        return context

    def build_translation_prompt(
        self,
        user_request: str,
        command_history: Optional[List[str]] = None,
        user_preferences: Optional[Dict[str, Any]] = None
    ) -> List[Dict[str, str]]:
        """
        Build a complete prompt for command translation.

        Args:
            user_request (str): The user's natural language request.
            command_history (Optional[List[str]]): Previous commands for context.
            user_preferences (Optional[Dict[str, Any]]): User preferences.

        Returns:
            List[Dict[str, str]]: List of message dictionaries for the OpenAI API.
        """
        messages = []

        # System prompt
        system_prompt = self.base_system_prompt + "\n\n" + self.safety_prompt

        # Add platform and shell information
        system_prompt += "\n\n" + self._get_platform_prompt()
        system_prompt += "\n" + self._get_shell_prompt()

        messages.append({"role": "system", "content": system_prompt})

        # Add system context
        system_context = self.build_system_context()
        messages.append({
            "role": "system",
            "content": f"System information: {json.dumps(system_context, indent=2)}"
        })

        # Add command history for context if available
        if command_history and len(command_history) > 0:
            history_prompt = "Recent command history:\n"
            for i, cmd in enumerate(command_history[-5:]):  # Last 5 commands
                history_prompt += f"{i+1}. {cmd}\n"

            messages.append({"role": "system", "content": history_prompt})

        # Add user preferences if available
        if user_preferences:
            pref_prompt = "User preferences:\n"
            for key, value in user_preferences.items():
                pref_prompt += f"- {key}: {value}\n"

            messages.append({"role": "system", "content": pref_prompt})

        # Add the user's request
        messages.append({"role": "user", "content": user_request})

        return messages

    def build_explanation_prompt(self, command: str) -> List[Dict[str, str]]:
        """
        Build a prompt for explaining a command.

        Args:
            command (str): The command to explain.

        Returns:
            List[Dict[str, str]]: List of message dictionaries for the OpenAI API.
        """
        system_prompt = (
            "You are CommandRex, an expert in explaining terminal commands. "
            "Your task is to explain the given command in a clear, educational way. "
            "Break down each component and explain what it does.\n\n"
            "Respond in JSON format with the following structure:\n"
            "{\n"
            '  "explanation": "overall explanation of the command",\n'
            '  "components": [\n'
            '    {"part": "command_part", "description": "what this part does"}\n'
            "  ],\n"
            '  "examples": ["example usage 1", "example usage 2"],\n'
            '  "related_commands": ["related1", "related2"]\n'
            "}\n"
        )

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Explain this command: {command}"}
        ]

        return messages

    def build_safety_assessment_prompt(self, command: str) -> List[Dict[str, str]]:
        """
        Build a prompt for assessing command safety.

        Args:
            command (str): The command to assess.

        Returns:
            List[Dict[str, str]]: List of message dictionaries for the OpenAI API.
        """
        system_prompt = (
            "You are CommandRex, an expert in terminal command safety. "
            "Your task is to assess the safety of the given command. "
            "Identify any potentially dangerous operations, such as file deletion, "
            "system modifications, or network operations.\n\n"
            "Respond in JSON format with the following structure:\n"
            "{\n"
            '  "is_safe": true/false,\n'
            '  "risk_level": "none/low/medium/high",\n'
            '  "concerns": ["concern1", "concern2"],\n'
            '  "recommendations": ["recommendation1", "recommendation2"],\n'
            '  "safer_alternatives": ["alternative1", "alternative2"]\n'
            "}\n"
        )

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Assess the safety of this command: {command}"}
        ]

        return messages
